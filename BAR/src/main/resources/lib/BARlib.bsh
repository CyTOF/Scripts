//@UIService uiservice

/* BARlib.bsh
 * IJ BAR: https://github.com/tferr/Scripts#scripts
 *
 * Common BAR library (http://imagej.net/BAR#BAR_lib) to be placed in BAR/lib. This file
 * can host functions/methods to be used across your scripts. To load these scripting
 * additions, append the following to your BeanShell files:
 *
 *     import bar.Utils
 *     addClassPath(Utils.getBARDir());
 *     importCommands("lib/");
 *     BARlib();
 *
 * Then, initiate the BARlib class, calling methods as usual:
 *     lib = new BARlib();
 *     lib.confirmLoading();
 */

BARlib() {

public class BARlib {

	/** Acknowledges accessibility to this file */
	void confirmLoading() {
		uiservice.showDialog("BAR lib successfully loaded!")
	}

	/** Returns text from the system clipboard or an empty string if no text was found */
	String getClipboardText() {
		import bar.Utils;
		return Utils.getClipboardText();
	}

	/** Returns a random uuid */
	String randomString() {
		import java.util.UUID;
		return UUID.randomUUID().toString();
	}

	/**
	 * Smooths 1D data according to the specified window. Returns
	 * the original data if window is not a positive integrer.
	 */
	double[] getSimpleMovingAverage(double[] values, int window) {
		if (window<1) return values;
		svalues = new double[values.length];
		for (i=0; i<values.length; i++) {
			svalues[i] = 0; n = 0;
			for (j=Math.max(0, i-window); j<Math.min(values.length, i+window); j++) {
				svalues[i] += values[j]; n++;
			}
			svalues[i] /= n;
		}
		return svalues;
	}

	/** This method returns a gaussian fit from X,Y data */
	double[] getGaussian(double[]xvalues, double[] yvalues) {
		import ij.measure.CurveFitter;	// http://javadoc.imagej.net/ImageJ1/index.html?ij/measure/CurveFitter.html
		cf = new CurveFitter(xvalues, yvalues);
		cf.doFit(CurveFitter.GAUSSIAN);
		fittedValues = new double[xvalues.length];
		for (i=0; i<xvalues.length; i++)
			fittedValues[i] = cf.f(xvalues[i]);
		return fittedValues;
	}

	/** Returns the greatest common divisor between 2 numbers */
	int gcd(a, b) {
		return (b==0) ? a : gcd(b, a%b);
	}

	/** Returns the greatest common divisor between 2 numbers using Commons Math */
	int gcdCommons(a, b) {
		import org.apache.commons.math3.util.ArithmeticUtils;
		return ArithmeticUtils.gcd(a,b);
	}

	/** Returns surface area and volume of a sphere of radius r */
	double[] sphereCalc(r) {
		sph_area = 4 * Math.PI * (r*r);
		sph_vol = 4/3.0 * Math.PI * (r*r*r);
		return new double[]{sph_area, sph_vol};
	}

}
}
