/* Plot_Results.bsh
 * IJ BAR: https://github.com/tferr/Scripts#scripts
 *
 * Interactively creates a multi-series plot (XY with or without error bars,
 * and vector fields) from ImageJ measurements or imported spreadsheet data.
 *
 * Requires BAR_-X.X.X.jar. To use it without BAR append the getResultsTable()
 * method in bar.Utils to this file, replacing its calls accordingly.
 *
 * TF, v2015.08
 */

import bar.Utils;
import ij.IJ;
import ij.Prefs;
import ij.gui.DialogListener;
import ij.gui.ImageWindow;
import ij.gui.GenericDialog;
import ij.gui.NonBlockingGenericDialog;
import ij.gui.Plot;
import ij.gui.PlotDialog;
import ij.gui.PlotWindow;
import ij.measure.ResultsTable;
import ij.plugin.Colors;
import ij.plugin.frame.Recorder;
import ij.util.Tools;
import ij.WindowManager;

/**
 * Adds a dataset to the script's plot according to the settings
 * retrieved by the dialog listener. Plot is created if it does
 * not exist, i.e., if the method has not been called before.
 */
void addDataset() {

	// Do not proceed if dataset contains invalid data
	if (!super.validData) {
		IJ.showMessage("Invalid data",
			"Chosen column(s) do not seem to contain numeric data.");
		return;
	}

	// Create and display plot with ajusted limits if first dataset
	boolean firstRun = false;
	if (super.plot==null || super.pw==null) {
		firstRun = true;
		xLimits = Tools.getMinMax(x1);
		yLimits = Tools.getMinMax(y1);
		super.plot = new Plot(WindowManager.makeUniqueName("Plotted Results"),
				"", "", Plot.DEFAULT_FLAGS);
		if (super.font!=null)
			super.plot.setFont(super.font);
		super.plot.setLimits(xLimits[0], xLimits[1], yLimits[0], yLimits[1]);
		super.pw = super.plot.show();
	}

	// Add the dataset (with vectors, all column choices must be valid)
	super.plot.setColor(super.dColor, super.dColor2);
	if (super.vectorData)
		super.plot.drawVectors(super.x1, super.y1, super.x2, super.y2);
	else {
		super.plot.addPoints(super.x1, super.y1, Plot.toShape(super.dShape));
		if (super.x2!=null)
			super.plot.addHorizontalErrorBars(super.x2);
		if (super.y2!=null)
			super.plot.addErrorBars(super.y2);
	}

	// Update plot legend, dataset tally, and axis limits
	if (!firstRun)
		super.legend += "\n";
	super.legend += super.datasetLabel;
	super.plot.setColor(Color.BLACK);
	super.plot.addLegend(super.legend);
	super.plot.setLimitsToFit(true);
	super.datasetCounter++;
}

/**
 * Generates abscissae from row numbers of the specified ResultsTable.
 * Useful for datasets in which only Y-values need to be plotted.
 */
 double[] generateX(ResultsTable rt) {
 	int size = rt.getCounter();
	double[] incX = new double[size];
	for (int i=0; i<size; i++)
		incX[i] = (double)i;
	return incX;
}

/**
 * Retrieves a list of column choices for the specified ResultsTable.
 * The "Label" column (containing non-numeric data) is excluded).
 */
String[] getColumnChoices(ResultsTable rt) {
	n = rt.getLastColumn();
	cChoices = new String[n+2];
	for (int i=0; i<=n; i++)
		cChoices[i] = rt.getColumnHeading(i);
	cChoices[n+1] = "*None*";
	return cChoices;
}

/**
 * Activates the Checkbox of a RadioButtonGroup() in a GenericDialog
 * associated with the specified label. <code>panel</code> is the
 * java.awt.Panel to which the RadioButtonGroup (java.awt.CheckboxGroup)
 * was added as per ij.gui.GenericDialog.addRadioButtonGroup().
 */
void activateRadioCheckbox(Panel panel, String label) {
	Component[] components = panel.getComponents();
	for (int i = 0; i<components.length; i++) {
		Component c = components[i];
		if (c instanceof Checkbox) {
			Checkbox cb = (Checkbox)c;
			if (cb.getLabel().equals(label)) {
				cb.setState(true);
				return;
			}
		}
	}
	return;
}

/**
 * Prompts the user for settings. Position of dialog is stored using
 * the ImageJ preferences mechanism. All the values in the prompt are
 * retrieved in real time by scripting the ij.gui.DialogListener
 * interface (see anonymous inner class <code>dl</code> below).
 */
void promptForData() {

	// Define column choices for drop-down menus
	super.colChoices = getColumnChoices(rt);

	// Build prompt if it is not being displayed
	gdWindow = WindowManager.getWindow("Plot Builder");
	if (!IJ.macroRunning() && gdWindow!=null) {
		gdWindow.toFront();
		return;
	}
	gd = new NonBlockingGenericDialog("Plot Builder");
	gd.addChoice("      X-values", super.colChoices, "*None*");
	gd.addChoice(" X-error bars", super.colChoices, "*None*");
	gd.addChoice("      Y-values", super.colChoices, super.colChoices[0]);
	gd.addChoice(" Y-error bars", super.colChoices, "*None*");
	gd.addCheckbox("Vector field dataset", super.vectorData);
	gd.addMessage("");
	gd.addRadioButtonGroup("Style:", super.S_LABELS, 4, 2, super.dShape);
	gd.addRadioButtonGroup("Color:", Colors.colors, 5, 2, super.dColor);

	// Add the "Add Dataset" button to the dialog
	super.datasetButton = new Button("       Add Dataset "
			+ String.valueOf(super.datasetCounter+1) + "       ");
	super.datasetButton.addActionListener(gd);
	buttonPanel = new Panel();
	buttonPanel.add(super.datasetButton);
	gd.addPanel(buttonPanel, GridBagConstraints.SOUTH, new Insets(10,0,0,0));

	// Generate a 3-button prompt
	gd.addHelp("");
	gd.setHelpLabel("Options");
	gd.enableYesNoCancel("Close", "Reload");
	gd.hideCancelButton();
	gd.addDialogListener(dl);

	// Display prompt at last screen position
	LOC_KEY = "bar.PRloc";
	loc = Prefs.getLocation(LOC_KEY);
	if (loc!=null) {
		gd.centerDialog(false);
		gd.setLocation(loc);
	}
	gd.showDialog();
	Prefs.saveLocation(LOC_KEY, gd.getLocation());

	// Dialog closure: Update plot if user pressed "OK",
	// plot dataset if a macro/script "OKayed" the prompt
	if (gd.wasCanceled()) { // Dialog dismissed
		return;
	} if (gd.wasOKed()) { // "Close" button pressed
		if (IJ.macroRunning())
			addDataset();
		else if (super.plot!=null)
			super.plot.setLimitsToFit(true);
	} else { // "Reload" button pressed
		super.rt = Utils.getResultsTable();
		if (rt!=null) {

			// Re-displaying the prompt is problematic when recording macros
			// due to duplicated keywords. So, we'll intercept the recording
			if (Recorder.record)
				Recorder.setCommand("Plot Results");
			newPlot = (IJ.altKeyDown() || super.plot==null);
			if (!newPlot)
				newPlot = IJ.showMessageWithCancel("New Plot Window?",
					"Results table successfully reloaded. Plot it in new window?"
					+"\n(Hold \"Alt\" while reloading to skip this message).");
			if (newPlot) {
				super.datasetCounter = 0;
				super.legend = "";
				super.plot = null;
				super.pw = null;
			}
			promptForData();
		}
	}
	return;
}

/** Assesses if the specified ResultsTable heading contains numeric data */
boolean validColumn(String columnHeading) {
	return !columnHeading.equals("Label") && !columnHeading.equals("*None*") &&
		super.rt.getColumnIndex(columnHeading)!=ResultsTable.COLUMN_NOT_FOUND;
}

/**
 * Inner class scripting the ij.gui.DialogListener interface. We'll
 * use it to read in real-time all of the options in the prompt.
 */
DialogListener dl = new DialogListener() {

	// This method is invoked by the GenericDialog upon changes
	dialogItemChanged(GenericDialog gd, java.awt.AWTEvent e) {

		// Read parameters from dialog
		x1Col = gd.getNextChoiceIndex();
		x2Col = gd.getNextChoiceIndex();
		y1Col = gd.getNextChoiceIndex();
		y2Col = gd.getNextChoiceIndex();
		super.vectorData = gd.getNextBoolean();
		super.dShape = gd.getNextRadioButton();
		super.dColor = gd.getNextRadioButton();

		// Define the dataset: A vector field or a X,Y series (using
		// incremental x-values if user chose a non-numeric column)
		super.x1 = validColumn(super.colChoices[x1Col])?super.rt.getColumnAsDoubles(x1Col):null;
		if (!super.vectorData && super.x1==null)
			super.x1 = generateX(super.rt);
		validX1 = super.x1 != null;
		super.datasetLabel = super.colChoices[y1Col];
		super.y1 = validColumn(super.datasetLabel)?super.rt.getColumnAsDoubles(y1Col):null;
		validY1 = super.y1 != null;
		super.x2 = validColumn(super.colChoices[x2Col])?super.rt.getColumnAsDoubles(x2Col):null;
		validX2 = super.x2 != null;
		super.y2 = validColumn(super.colChoices[y2Col])?super.rt.getColumnAsDoubles(y2Col):null;
		validY2 = super.y2 != null;

		// Assess if choices are valid and plot/table remain available
		if (super.vectorData)
			super.validData = validX1 && validY1 && validX2 && validY2;
		else
			super.validData = validX1 && validY1;
		window = (ImageWindow)super.pw;
		pwClosed = window!=null && window.closed;
		rtClosed = ResultsTable.getResultsWindow()==null;

		// Update dialog components if dialog is being displayed
		if (e != null && !IJ.macroRunning()) {

			// Update "Add Dataset" button
			if (pwClosed)
				super.datasetButton.setLabel("Reopen Closed Plot");
			if (rtClosed)
				super.datasetButton.setLabel("Results Table Closed...");
			super.datasetButton.setEnabled(!rtClosed && super.validData);

			// Update choice labels
			gd.getComponent(0).setText(super.vectorData?"X-start (X1)":"X-values");
			gd.getComponent(0).setForeground(validX1?Color.BLACK:Color.GRAY);
			gd.getComponent(2).setText(super.vectorData?"X-end (X2)":"X-error bars");
			gd.getComponent(2).setForeground(validX2?Color.BLACK:Color.GRAY);
			gd.getComponent(4).setText(super.vectorData?"Y-start (Y1)":"Y-values");
			gd.getComponent(4).setForeground(validY1?Color.BLACK:Color.GRAY);
			gd.getComponent(6).setText(super.vectorData?"Y-end (Y2)":"Y-error bars");
			gd.getComponent(6).setForeground(validY2?Color.BLACK:Color.GRAY);
		}

		// Check if the 'Add dataset' button has been pressed
		if (e != null && e.getSource()==super.datasetButton) {
			if (pwClosed) {
				super.pw = super.plot.show(); // Redisplay plot
			} else if (!rtClosed) {

				// Plot data and auto-select new defaults for next dataset
				addDataset();
				choices = gd.getChoices();
				y1idx = (super.datasetCounter % (super.colChoices.length-1));
				choices.elementAt(2).select(y1idx);
				cIdx = (super.datasetCounter % (Colors.colors.length-1));
				colorRadioButtonGroupPanel = gd.getComponent(13); // empirically determined
				activateRadioCheckbox(colorRadioButtonGroupPanel, Colors.colors[cIdx]);
				//x1idx = (y1idx+1 % super.colChoices.length);
				//choices.elementAt(0).select(x1idx);
				//shapeRadioButtonGroupPanel = gd.getComponent(11);
				//activateRadioCheckbox(shapeRadioButtonGroupPanel, S_LABELS[cIdx])
			}
			super.datasetButton.setLabel("Add Dataset "+ String.valueOf(super.datasetCounter+1));

		// Check if the 'Options' button has been pressed
		} else if (e != null && e.toString().contains("Options")) {

			FONTS = new String[]{Font.SANS_SERIF, Font.MONOSPACED, Font.SERIF};
			ogd = new GenericDialog("Plot Builder Advanced Options", gd.getParent());
			ogd.addChoice("Font for new plots:", FONTS, FONTS[0]);
			ogd.addChoice("Secondary color:", Colors.colors, super.dColor2);
			ogd.addMessage("\n \nOptions below apply only to the current plot:");
			ogd.addNumericField("Line width:", 1, 0, 3, "(Default: 1 pixel)");
			ogd.addNumericField("Major ticks length:", 7, 0, 3, "(Default: 7 pixels)");
			ogd.addNumericField("Minor ticks length:", 3, 0, 3, "(Default: 3 pixels)");
			ogd.addNumericField("Maximum n. of intervals:", 12, 0, 3, "(Default: 12)");
			ogd.enableYesNoCancel("OK", "Axis Options...");
			ogd.showDialog();
			if (ogd.wasOKed()) {
				super.font = new Font(FONTS[ogd.getNextChoiceIndex()], Font.PLAIN,
					ij.gui.PlotWindow.fontSize);
				super.dColor2 = Colors.colors[ogd.getNextChoiceIndex()];
				if (super.plot!=null) {
					super.plot.setLineWidth((int)ogd.getNextNumber());
					super.plot.setTickLength((int)ogd.getNextNumber());
					super.plot.setMinorTickLength((int)ogd.getNextNumber());
					super.plot.setMaxIntervals((int)ogd.getNextNumber());
					super.plot.updateImage();
				}
			} else if (!ogd.wasCanceled())
				if (super.plot==null || super.pw==null)
					IJ.showMessage("No data",
					"At least one dataset must be added\nto the plot before customizing it.");
				else
					new PlotDialog(super.plot, PlotDialog.AXIS_OPTIONS).showDialog(super.pw);
		}

		return true;
	}

};

/** Definitions of dataset shapes as per ij.gui.Plot.toShape() */
String[] S_LABELS = {"line","x","box","connected","triangle","dot","circle","cross"};

/** Parameters */
ResultsTable rt;			// ResultsTable from which data is retrieved
double[] x1, y1, x2, y2;	// Dataset arrays (ResultsTable numeric columns)
String[] colChoices;		// Array holding choices for ResultsTable columns
String datasetLabel;		// The ResultsTable heading describing the dataset
boolean validData = true;	// Flag monitoring if all dataset values are valid
boolean vectorData = false;	// Flag monitoring if dataset is a vector field
String dShape = "line";		// Descriptive label of the dataset shape
String dColor = "red";		// Descriptive label of the dataset main color
String dColor2 = "black";	// Descriptive label of the dataset secondary color
int datasetCounter = 0;		// The number of datasets being plotted
Plot plot = null;			// The plot produced by this script
PlotWindow pw = null;		// The plot's window
String legend = "";			// The plot legend
Button datasetButton;		// The dialog button used to append datasets to the plot
Font font = null;			// The custom plot font (Advanced Options prompt)


// After setting-up everything, we try to retrieve valid data from
// the Results table. If the table is valid, we display the prompt:
rt = Utils.getResultsTable();
if (rt!=null)
	promptForData();
