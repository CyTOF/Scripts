/* Process_Folder_IJM.ijm
 * IJ BAR snippet https://github.com/tferr/Scripts/tree/master/Snippets
 *
 * This macro[1] snippet implements a generic, reusable macro to be used as a
 * more modular and flexible alternative to the Process>Batch>Macro built-in
 * command.
 *
 * It is composed of four self-contained functions:
 *   1. getOutputDirectory(): Sets a destination folder to save processed images
 *   2. validExtension(): Determines wich file extensions should be processed
 *   3. processFiles(): Applies myRoutines() to each individual image
 *   4. myRoutines(): Container to hold the image processing routines
 *
 * Because all the tasks required to iterate through the files[2,3] are handled
 * by separated functions, only the myRoutines() function needs to be edited,
 * e.g., with code generated by the Macro Recorder. It can also call macros and
 * scripts saved elsewhere (see Help>Macro Functions... for details). Example:
 *      function myRoutines() {
 *          runMacro("/Path/to/Coolest/Macro.ijm");
 *          eval("python", "/Path/to/Coolest/Script.py");
 *      }
 *
 * [1] https://github.com/tferr/Scripts/tree/master/Snippets#imagej-macro-language
 * [2] http://fiji.sc/How_to_apply_a_common_operation_to_a_complete_directory
 * [3] http://rsb.info.nih.gov/ij/macros/BatchProcessFolders.txt
 */


// Define input directory
inputDir = getDirectory("Select a source directory");

// Create output directory
outputDir = getOutputDirectory(inputDir);

// Iterate through inputDir (ignoring files with non-specified
// extensions) and save a copy of processed images in outputDir
processFiles(inputDir, outputDir);

showMessage("All done!");



/* This function defines all the image manipulation routines. */
function myRoutines() {

	// <Your code here>

}


/*
 * This function retrieves the full path to a '_Processed' folder placed at the
 * same location of <input_dir>. For safety, the macro is aborted if <input_dir>
 * is not accessible or if the directory cannot be created, e.g., due to lack of
 * appropriate credentials. It does nothing if such a directory already exists.
 */
function getOutputDirectory(input_dir) {

	// Check if path to input_dir is valid
	if (!File.isDirectory(input_dir)) {
		exit("Macro aborted: The directory\n'"+ input_dir +"'\nwas not found.");
	}

	// Ensure the string defining input_dir does not end in '/' or '\'
	Returns the file name separator character
	if (endsWith(input_dir, File.separator)) {
		separatorPosition = lengthOf(input_dir);
		input_dir = substring(input_dir, 0, separatorPosition-1);
	}

	// Create output directory (unless it already exists)
	output_dir = input_dir + "_Processed" + File.separator;
	if (!File.isDirectory(output_dir)) {
		File.makeDirectory(output_dir);
		if (!File.isDirectory(output_dir))
			exit("Macro aborted:\n" + output_dir + "\ncould not be created.");
	}
	return output_dir;
}

/*
 * This function returns true if the file extension of the argument <filename>
 * is present in the <extensions> array. Returns false otherwise.
 */
function validExtension(filename) {
	extensions = newArray(".tif", ".stk", ".oib");
	valid = false;
	for (i=0; i<extensions.length; i++) {
		if (endsWith(toLowerCase(filename), extensions[i])) {
			valid = true;
			break;
		}
	}
	return valid;
}

/*
 * This function applies <myRoutines()> to individual images filtered by
 * <validExtension()>. It takes 2 arguments: <input_dir>, the path of an input
 * directory and <output_dir>, the directory where a TIFF copy of each processed
 * image will be saved. It does nothing if <input_dir> does not exist.
 */
function processFiles(input_dir, output_dir) {

	// Do not display images during macro execution
	setBatchMode(true);

	// Get contents of input directory (files and subdirectories)
	files = getFileList(input_dir);

	// Loop through the file list. We will check if input_dir/output_dir
	// exist since that task was already performed by getOutputDirectory()
	for (i=0; i<files.length; i++) {

		// Display progress
		showProgress(i, files.length);

		// Process files of the desired extension
		file_path = files[i];
		if (validExtension(file_path)) {

			// Open file. Note that some files may not be handled by
			// IJ directly but by other plugins, such as Bio-Formats
			open(file_path);

			// Apply processing steps
			myRoutines();

			// Save processed image in outDir (enforcing .tif extension)
			image_title = substring(getTitle(), 0, lastIndexOf(getTitle(), "."));
			saveAs("tiff", output_dir + image_title + ".tif");
			close();


		// Report unsolicited files
		} else {
			print(i+1, "Skipping "+ file_path +"... not the right file type");
		}
	}
}
